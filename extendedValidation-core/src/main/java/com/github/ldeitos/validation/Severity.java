package com.github.ldeitos.validation;

import static com.github.ldeitos.validation.ConstraintSeverity.alert;
import static com.github.ldeitos.validation.ConstraintSeverity.defaultValue;
import static com.github.ldeitos.validation.ConstraintSeverity.error;
import static com.github.ldeitos.validation.ConstraintSeverity.fatal;
import static com.github.ldeitos.validation.ConstraintSeverity.info;
import static com.github.ldeitos.validation.ConstraintSeverity.warn;

/**
 * Possibles severity level to be generated by ExtendedValidation engine.
 *
 * @author <a href=mailto:leandro.deitos@gmail.com>Leandro Deitos</a>
 *
 */
public enum Severity {
	/**
	 * Error severity.
	 */
	ERROR(error()),

	/**
	 * Alert severity.
	 */
	ALERT(alert()),

	/**
	 * Info severity.
	 */
	INFO(info()),

	/**
	 * Warn severity.
	 */
	WARN(warn()),

	/**
	 * Fatal severity.
	 */
	FATAL(fatal());

	private Class<? extends ConstraintSeverity> cSeverity;

	private Severity(Class<? extends ConstraintSeverity> constraintSeverity) {
		cSeverity = constraintSeverity;
	}

	Class<? extends ConstraintSeverity> getConstraintSeverity() {
		return cSeverity;
	}

	/**
	 * @param constraintSeveritiry
	 *            {@link ConstraintSeverity} to recover {@link Severity}
	 *            equivalent.
	 * @return {@link Severity} item recovered by {@link ConstraintSeverity}. <br>
	 *         Case {@link ConstraintSeverity} does't have a equivalent
	 *         {@link Severity}, {@link #ERROR} is a default return.
	 */
	public static Severity fromConstraintSeverity(Class<? extends ConstraintSeverity> constraintSeveritiry) {
		Severity retorno = null;

		for (Severity value : values()) {
			if (value.getConstraintSeverity().equals(constraintSeveritiry)) {
				retorno = value;
				break;
			}
		}

		if (retorno == null) {
			retorno = fromConstraintSeverity(defaultValue());
		}

		return retorno;
	}
}
